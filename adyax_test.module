<?php
/**
 * @file
 * Main module file.
 */

include_once 'adyax_test.features.inc';

/**
 * Implements hook_field_info().
 */
function adyax_test_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'adyax_test_vimeo_code' => array(
      'label' => t('Vimeo'),
      'description' => t('Demonstrates a field composed of an vimeo_code color.'),
      'default_widget' => 'adyax_test_3text',
      'default_formatter' => 'adyax_test_simple_text',
    ),
  );
}

/**
 * Implements hook_field_validate.
 *
 * @see adyax_test_field_widget_error()
 */
function adyax_test_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['vimeo_code'])) {
      if (!preg_match('@^[0-9]+$@', $item['vimeo_code'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'adyax_test_invalid',
          'message' => t('Vimeo code contains only numbers.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function adyax_test_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if ($display['type'] == 'adyax_test_vimeo_thumbnail') {
    $summary = array();

    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    unset($image_styles['']);
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_settings_form.
 */
function adyax_test_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'adyax_test_vimeo_thumbnail') {
    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
  }

  return $element;
}

/**
 * Implements hook_field_is_empty.
 */
function adyax_test_field_is_empty($item, $field) {
  return empty($item['vimeo_code']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see adyax_test_field_formatter_view()
 */
function adyax_test_field_formatter_info() {
  return array (
    'adyax_test_vimeo_thumbnail' => array (
      'label' => t('Vimeo video thumbnail'),
      'field types' => array ('adyax_test_vimeo_code'),
      'settings' => array (
        'image_style' => 'thumbnail',
      ),
    ),
    'adyax_test_vimeo_video' => array (
      'label' => t('Vimeo video'),
      'field types' => array('adyax_test_vimeo_code'),
    ),
  );
}

/**
 * Implements hook_init.
 */
function adyax_test_init() {
  _adyax_test_dummy_content();
}

/**
 * Implements hook_test_post_features_enable_feature.
 */
function adyax_test_post_features_enable_feature($component) {
}

/**
 * Implemets hook_enable.
 */
function adyax_test_modules_enabled($modules) {
}

/**
 * Dummy content.
 */
function _adyax_test_dummy_content() {
  $first_run = variable_get('adyax_test_first_run', TRUE);
  if ($first_run) {
    $ids = array (15298502, 1936885, 2005166, 1772443, 1634645);
    foreach ($ids as $id) {
      try {
        _adyax_test_create_vimeo_entity($id);
      }
      catch (Exception $e) {
        drupal_set_message(t('Vimeo video - @id has not been processed', array ('@id' => $id)), 'error');
      }
    }
    variable_set('adyax_test_first_run', FALSE);
  }
}

/**
 * It creates a vimeo content by Vimeo id.
 */
function _adyax_test_create_vimeo_entity($id) {
  global $user;

  $result = drupal_http_request('http://vimeo.com/api/v2/video/' . $id . '.json');
  if ($result->code != 200) {
    return FALSE;
  }
  $data = json_decode($result->data);
  $data = reset($data);
  $node = new stdClass();
  $node->type = 'vimeo';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $field_name = 'field_vimeo';
  $langcode = field_language('node', $node, 'field_vimeo', NULL);
  $node->field_vimeo[$langcode][] = array (
    'vimeo_code' => $id,
  );
  $langcode = field_language('node', $node, 'body', NULL);
  $node->body[$langcode][] = array (
    'value' => $data->description,
  );
  $node->title = $data->title;
  node_save ($node);
}

/**
 * It loads a vimeo thumbnail.
 */
function _adyax_test_load_thumnail($id) {
  $result = drupal_http_request('http://vimeo.com/api/v2/video/' . $id . '.json');
  if ($result->code != 200) {
    return FALSE;
  }
  $data = json_decode($result->data);
  $image = file_get_contents($data[0]->thumbnail_large);
  $dir = 'public://fields/vimeo/thumbnail/';
  if (!file_exists(drupal_realpath($dir))) {
    drupal_mkdir($dir, NULL, TRUE);
  }
  $destination = $dir . $id . '.jpg';
  $file = file_save_data($image, $destination, FILE_EXISTS_REPLACE);
  if (is_object($file)) { 
    $file->status = 1;
    $file = file_save($file);
    return $file;
  }

  return FALSE;
}

/**
 * Implements hook_field_presave.
 */
function adyax_test_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'adyax_test_vimeo_code') {
    foreach ($items as $delta => &$item) {
      if (isset($item['vimeo_code'])) {
        $file = _adyax_test_load_thumnail($item['vimeo_code']);
        if ($file) {
          $item['fid'] = $file->fid;
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see adyax_test_field_formatter_info()
 */
function adyax_test_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'adyax_test_vimeo_thumbnail':
      foreach ($items as $delta => $item) {
        $file = file_load($item['fid']);

        $image = array (
          '#theme' => 'image_style',
          '#style_name' => $display['settings']['image_style'],
          '#path' => $file->uri
        );
        $element[$delta] = array (
          '#type' => 'link',
          '#href' => 'http://vimeo.com/' . $item['vimeo_code'],
          '#options' => array (
            'html' => TRUE,
          ),
          '#title' => render($image),
        );
      }
      break;

    case 'adyax_test_vimeo_video':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'iframe',
          '#attributes' => array(
            'src' => 'http://player.vimeo.com/video/' . $item['vimeo_code'],
            'width' => '500',
            'height' => '281',
            'frameborder' => '0',
            'webkitallowfullscreen' => 1,
            'mozallowfullscreen' => 1,
            'allowfullscreen' => 1,
          ),
          '#value' => NULL,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see adyax_test_field_widget_form()
 */
function adyax_test_field_widget_info() {
  return array(
    //'adyax_test_text'
    'adyax_test_video_code' => array(
      'label' => t('Vimeo code'),
      'field types' => array('adyax_test_vimeo_code'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function adyax_test_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['vimeo_code']) ? $items[$delta]['vimeo_code'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'adyax_test_video_code':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#description' => t('It only contains the vimeo code you can put a link here. The code is extracted automatically.'),
        '#attached' => array (
          'js' => array(drupal_get_path('module', 'adyax_test') . '/adyax_test.js'),
        ),
      );
      break;
  }

  $element['vimeo_code'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see adyax_test_field_validate()
 * @see form_error()
 */
function adyax_test_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'adyax_test_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * @} End of "defgroup adyax_test".
 */
